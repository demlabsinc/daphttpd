diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' regex-2.7-orig/src/regex.h regex-2.7-src/src/regex.h
--- regex-2.7-orig/src/regex.h	2006-05-02 23:37:34.000000000 +0200
+++ regex-2.7-src/src/regex.h	2007-07-20 21:21:19.781250000 +0200
@@ -24,6 +24,30 @@
 
 #include <sys/types.h>
 
+#ifndef __GNUC__
+# define __DLL_IMPORT__	__declspec(dllimport)
+# define __DLL_EXPORT__	__declspec(dllexport)
+#else
+# define __DLL_IMPORT__	__attribute__((dllimport)) extern
+# define __DLL_EXPORT__	__attribute__((dllexport)) extern
+#endif 
+
+#if (defined __WIN32__) || (defined _WIN32)
+# ifdef BUILD_REGEX_DLL
+#  define REGEX_DLL_IMPEXP	__DLL_EXPORT__
+# elif defined(REGEX_STATIC)
+#  define REGEX_DLL_IMPEXP	 
+# elif defined (USE_REGEX_DLL)
+#  define REGEX_DLL_IMPEXP	__DLL_IMPORT__
+# elif defined (USE_REGEX_STATIC)
+#  define REGEX_DLL_IMPEXP 	 
+# else /* assume USE_REGEX_DLL */
+#  define REGEX_DLL_IMPEXP	__DLL_IMPORT__
+# endif
+#else /* __WIN32__ */
+# define REGEX_DLL_IMPEXP	 
+#endif
+
 /* Allow the use in C++ code.  */
 #ifdef __cplusplus
 extern "C" {
@@ -178,7 +202,7 @@ typedef unsigned long int reg_syntax_t;
    some interfaces).  When a regexp is compiled, the syntax used is
    stored in the pattern buffer, so changing this does not affect
    already-compiled regexps.  */
-extern reg_syntax_t re_syntax_options;
+REGEX_DLL_IMPEXP reg_syntax_t re_syntax_options;
 
 /* Define combinations of the above bits for the standard possibilities.
    (The [[[ comments delimit what gets put into the Texinfo file, so
@@ -441,19 +465,19 @@ typedef struct
 
 /* Sets the current default syntax to SYNTAX, and return the old syntax.
    You can also simply assign to the `re_syntax_options' variable.  */
-extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
+REGEX_DLL_IMPEXP reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
 
 /* Compile the regular expression PATTERN, with length LENGTH
    and syntax given by the global `re_syntax_options', into the buffer
    BUFFER.  Return NULL if successful, and an error string if not.  */
-extern const char *re_compile_pattern (const char *__pattern, size_t __length,
+REGEX_DLL_IMPEXP const char *re_compile_pattern (const char *__pattern, size_t __length,
 				       struct re_pattern_buffer *__buffer);
 
 
 /* Compile a fastmap for the compiled pattern in BUFFER; used to
    accelerate searches.  Return 0 if successful and -2 if was an
    internal error.  */
-extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);
+REGEX_DLL_IMPEXP int re_compile_fastmap (struct re_pattern_buffer *__buffer);
 
 
 /* Search in the string STRING (with length LENGTH) for the pattern
@@ -461,14 +485,14 @@ extern int re_compile_fastmap (struct re
    characters.  Return the starting position of the match, -1 for no
    match, or -2 for an internal error.  Also return register
    information in REGS (if REGS and BUFFER->no_sub are nonzero).  */
-extern int re_search (struct re_pattern_buffer *__buffer, const char *__string,
+REGEX_DLL_IMPEXP int re_search (struct re_pattern_buffer *__buffer, const char *__string,
 		      int __length, int __start, int __range,
 		      struct re_registers *__regs);
 
 
 /* Like `re_search', but search in the concatenation of STRING1 and
    STRING2.  Also, stop searching at index START + STOP.  */
-extern int re_search_2 (struct re_pattern_buffer *__buffer,
+REGEX_DLL_IMPEXP int re_search_2 (struct re_pattern_buffer *__buffer,
 			const char *__string1, int __length1,
 			const char *__string2, int __length2, int __start,
 			int __range, struct re_registers *__regs, int __stop);
@@ -476,12 +500,12 @@ extern int re_search_2 (struct re_patter
 
 /* Like `re_search', but return how many characters in STRING the regexp
    in BUFFER matched, starting at position START.  */
-extern int re_match (struct re_pattern_buffer *__buffer, const char *__string,
+REGEX_DLL_IMPEXP int re_match (struct re_pattern_buffer *__buffer, const char *__string,
 		     int __length, int __start, struct re_registers *__regs);
 
 
 /* Relates to `re_match' as `re_search_2' relates to `re_search'.  */
-extern int re_match_2 (struct re_pattern_buffer *__buffer,
+REGEX_DLL_IMPEXP int re_match_2 (struct re_pattern_buffer *__buffer,
 		       const char *__string1, int __length1,
 		       const char *__string2, int __length2, int __start,
 		       struct re_registers *__regs, int __stop);
@@ -499,7 +523,7 @@ extern int re_match_2 (struct re_pattern
    Unless this function is called, the first search or match using
    PATTERN_BUFFER will allocate its own register data, without
    freeing the old data.  */
-extern void re_set_registers (struct re_pattern_buffer *__buffer,
+REGEX_DLL_IMPEXP void re_set_registers (struct re_pattern_buffer *__buffer,
 			      struct re_registers *__regs,
 			      unsigned int __num_regs,
 			      regoff_t *__starts, regoff_t *__ends);
@@ -507,8 +531,8 @@ extern void re_set_registers (struct re_
 #if defined _REGEX_RE_COMP || defined _LIBC
 # ifndef _CRAY
 /* 4.2 bsd compatibility.  */
-extern char *re_comp (const char *);
-extern int re_exec (const char *);
+REGEX_DLL_IMPEXP char *re_comp (const char *);
+REGEX_DLL_IMPEXP int re_exec (const char *);
 # endif
 #endif
 
@@ -534,19 +558,19 @@ extern int re_exec (const char *);
 #endif
 
 /* POSIX compatibility.  */
-extern int regcomp (regex_t *__restrict __preg,
+REGEX_DLL_IMPEXP int regcomp (regex_t *__restrict __preg,
 		    const char *__restrict __pattern,
 		    int __cflags);
 
-extern int regexec (const regex_t *__restrict __preg,
+REGEX_DLL_IMPEXP int regexec (const regex_t *__restrict __preg,
 		    const char *__restrict __string, size_t __nmatch,
 		    regmatch_t __pmatch[__restrict_arr],
 		    int __eflags);
 
-extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
+REGEX_DLL_IMPEXP size_t regerror (int __errcode, const regex_t *__restrict __preg,
 			char *__restrict __errbuf, size_t __errbuf_size);
 
-extern void regfree (regex_t *__preg);
+REGEX_DLL_IMPEXP void regfree (regex_t *__preg);
 
 
 #ifdef __cplusplus
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' regex-2.7-orig/src/regex_internal.h regex-2.7-src/src/regex_internal.h
--- regex-2.7-orig/src/regex_internal.h	2007-08-26 03:35:05.000000000 +0200
+++ regex-2.7-src/src/regex_internal.h	2007-10-24 11:34:44.984375000 +0200
@@ -416,7 +416,9 @@ static unsigned int re_string_context_at
 #define re_string_skip_bytes(pstr,idx) ((pstr)->cur_idx += (idx))
 #define re_string_set_index(pstr,idx) ((pstr)->cur_idx = (idx))
 
+#ifdef HAVE_ALLOCA_H
 #include <alloca.h>
+#endif
 
 #ifndef _LIBC
 # if HAVE_ALLOCA
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' regex-2.7-orig/testsuite/mcheck.h regex-2.7-src/testsuite/mcheck.h
--- regex-2.7-orig/testsuite/mcheck.h	2001-07-06 06:55:35.000000000 +0200
+++ regex-2.7-src/testsuite/mcheck.h	2007-07-20 14:58:23.593750000 +0200
@@ -23,39 +23,7 @@
 
 __BEGIN_DECLS
 
-/* Return values for `mprobe': these are the kinds of inconsistencies that
-   `mcheck' enables detection of.  */
-enum mcheck_status
-  {
-    MCHECK_DISABLED = -1,       /* Consistency checking is not turned on.  */
-    MCHECK_OK,                  /* Block is fine.  */
-    MCHECK_FREE,                /* Block freed twice.  */
-    MCHECK_HEAD,                /* Memory before the block was clobbered.  */
-    MCHECK_TAIL                 /* Memory after the block was clobbered.  */
-  };
-
-
-/* Activate a standard collection of debugging hooks.  This must be called
-   before `malloc' is ever called.  ABORTFUNC is called with an error code
-   (see enum above) when an inconsistency is detected.  If ABORTFUNC is
-   null, the standard function prints on stderr and then calls `abort'.  */
-extern int mcheck (void (*__abortfunc) (enum mcheck_status)) __THROW;
-
-/* Similar to `mcheck  but performs checks for all block whenever one of
-   the memory handling functions is called.  This can be very slow.  */
-extern int mcheck_pedantic (void (*__abortfunc) (enum mcheck_status)) __THROW;
-
-/* Force check of all blocks now.  */
-extern void mcheck_check_all (void);
-
-/* Check for aberrations in a particular malloc'd block.  You must have
-   called `mcheck' already.  These are the same checks that `mcheck' does
-   when you free or reallocate a block.  */
-extern enum mcheck_status mprobe (void *__ptr) __THROW;
-
-/* Activate a standard collection of tracing hooks.  */
-extern void mtrace (void) __THROW;
-extern void muntrace (void) __THROW;
+#define mtrace()	
 
 __END_DECLS
 
